// 
// 文件名:    mbsquare2d_mm_1b4d.input
// 软件包:    JASMIN application
// 版权  :	(c) 2004-2010 北京应用物理与计算数学研究所
// 版本号:    $Revision: 1.4 $
// 修改  :    $Date: 2007/01/12 06:52:41 $
// 描述  :    输入文件:JASMIN-MBEulerMM实例.
//


DeformingGridInputUtilities2 {

        POINTS {
           number_of_points = 8
           coordinates_0    = 0, 1, 2, 0, 1, 2, 0, 1
           coordinates_1    = 0, 0, 0, 1, 1, 1, 2, 2
        }
        SEGMENTS {
           number_of_segments = 10
           segment_0 {
              type_of_geometry   = "LINE"
              number_of_cells    = 5
              start_point_number = 0
              end_point_number   = 1
              partitioning_method= "EVEN"              
           }
          segment_1 {     
	      type_of_geometry   = "LINE"
              number_of_cells    = 10
              start_point_number = 1
              end_point_number   = 2
              partitioning_method= "EVEN"              
           }    
           segment_2 {
              type_of_geometry   = "LINE"
              number_of_cells    = 10
              start_point_number = 0
              end_point_number   = 3
              partitioning_method= "EVEN"
           }	
 	segment_3 {
              type_of_geometry   = "LINE"
              number_of_cells    = 10
              start_point_number = 1
              end_point_number   = 4
              partitioning_method= "EVEN"
           }	
	   segment_4 {
              type_of_geometry   = "LINE"
              number_of_cells    = 10
              start_point_number = 2
              end_point_number   = 5
              partitioning_method= "EVEN"
           }
	 segment_5 {
              type_of_geometry   = "LINE"
              number_of_cells    = 5
              start_point_number = 3
              end_point_number   = 4
              partitioning_method= "EVEN"
           }
	 segment_6 {
              type_of_geometry   = "LINE"
              number_of_cells    = 10
              start_point_number = 4
              end_point_number   = 5
              partitioning_method= "EVEN"
           }
 	segment_7 {
              type_of_geometry   = "LINE"
              number_of_cells    = 5
              start_point_number = 3
              end_point_number   = 6
              partitioning_method= "EVEN"
           }
	 segment_8 {
              type_of_geometry   = "LINE"
              number_of_cells    = 5
              start_point_number = 4
              end_point_number   = 7
              partitioning_method= "EVEN"
           }
	 segment_9 {
              type_of_geometry   = "LINE"
              number_of_cells    = 5
              start_point_number = 6
              end_point_number   = 7
              partitioning_method= "EVEN"
           }
            
        }
        DOMAINS {
           number_of_domains = 3       
           domain_0 {
              mesh_generation_method = "XEVEN"
              box   = [(0,0),(4,9)]
              left_edge  = 2
              right_edge = 3
              lower_edge = 0
              upper_edge = 5
           }
	domain_1 {
              mesh_generation_method = "XEVEN"
              box   = [(5,0),(14,9)]
              left_edge  = 3
              right_edge = 4
              lower_edge = 1
              upper_edge = 6
           }
	  domain_2 {
              mesh_generation_method = "XEVEN"
              box   = [(0,10),(4,14)]
              left_edge  = 7
              right_edge = 8
              lower_edge = 5
              upper_edge = 9
           }  
           
        }

        BLOCKS {
           number_of_blocks = 1
           block_0 {
              domains = 0,1,2
           }
 	  
        }

}

TimerManager{
   timer_list       = "apps::main::*","algs::*::*"
   print_summed     = TRUE
   print_max        = TRUE
}

MeshOpt{

}

MeshOptLevelIntegrator{

}

HierarchyTimeIntegrator{

    start_time           = 0.e0    // 模拟的初始时刻.
    end_time             = 0.05 

    max_integrator_steps = 2      // 模拟的最大时间步数.

   max_dt              = 1.e-1    // 最大时间步步长.
   grow_dt             = 1.2      // 连续两个时间步长的最大放大倍数.


   GriddingAlgorithm{

      // 仅包含单层网格.
      max_levels = 1

      // 最大网格片大小.
      largest_patch_size {
         level_0 = 64,64 
      }

      // 最小网格片大小.
      smallest_patch_size {
         level_0 = 4 , 4
      }

   }

}

